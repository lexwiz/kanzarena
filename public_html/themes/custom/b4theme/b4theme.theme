<?php

/**
 * @file
 * SUBTHEME theme file.
 */


function b4theme_preprocess_field(&$variables, $hook) {
  //dpm($variables); field-link-flag
//  dpm($variables['element']);
  $element = $variables['element'];
  if (isset($element['#field_name'])) {
    //dpm($variables['element']['#field_name']);
    if ($element['#field_name'] == 'field_tags') {
      //dpm($variables['items'][0]['content']);
      //echo $variables['items'][0]['content']['#options']['entity']->id();
      foreach ($variables['items'] as $index => $item) {
        //echo $index . "<br>";
        //echo $item;
        $variables['items'][$index]['content']['#options']['attributes']['class'][] = 'tid-item tid-' . $item['content']['#options']['entity']->id();
        // you can generate tid from ['#options']['entity']
      }
    }
//    if ($element['#field_name'] == 'field_vendor_opt') {
//      dpm($variables['items'][0]);
//      $vendor_opt = $variables['items'][0]['content']['#markup'];
//    }
//    if ($element['#field_name'] == 'field_stock') {
////      dpm($variables['items'][0]);
//      //echo $variables['items'][0]['content']['#options']['entity']->id();
//      //foreach ($variables['items'] as $index => $item) {
//      //echo $index . "<br>";
//      //echo $item;
//      $stock = $variables['items'][0]['content']['#markup'];
//      if (\Drupal::currentUser()->isAnonymous()) {
//        // Anonymous user...
//        if ($stock > 0) {
//          $variables['items'][0]['content']['#markup'] = "<span class = 'in_stock'>В наличии</span>";
//        }
//        else {
//          $variables['items'][0]['content']['#markup'] = "<span class = 'out_stock'>Нет в наличии</span>";
//          //$variables['items'][0]['attributes'] -> addClass("red");
//        }
//      }
//      else {
//        if ($stock > 0) {
//          $variables['items'][0]['content']['#markup'] = "<span class = 'in_stock'>В наличии " . $stock . " шт.</span>";
//          //$variables['items'][0]['attributes']->setAttribute('class', 'some_class');
//        }
//        else {
//          $variables['items'][0]['content']['#markup'] = "<span class = 'out_stock'>Нет в наличии (" . $stock . ")</span>";
//          //$variables['items'][0]['attributes']->setAttribute('class', 'some_class');
//        }
//      }
//
//      //$stock = $variables['items'][0]['content']['#markup'];
//
//      //$variables['items'][0]['content']['#markup'] = "Test";
//      //$variables['items'][$index]['content']['#options']['attributes']['class'][] = 'tid-item tid-' . $item['content']['#options']['entity']->id();
//      // you can generate tid from ['#options']['entity']
//      // }
//    }
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter() for commerce_order_item_add_to_cart_form.
 */
function b4theme_form_commerce_order_item_add_to_cart_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add custom class to form.
  $form['#attributes']['class'][] = 'add-to-cart-form form-inline justify-content-center';
}
function b4theme_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  //dpm($form_state);
  if ($form['#id'] == 'views-exposed-form-product-search-page-1') {

    $form['keys']['#size'] = 40;  // define size of the textfield

    //$form['#attributes']['class'][] ='navbar-form navbar-center';

  }
}

function b4theme_preprocess_commerce_cart_block(&$variables) {
  $variables['icon']['#uri'] = drupal_get_path('theme', 'b4theme') . '/icons/73b355/cart.svg';
//  $variables['icon']['#attributes']['class'][] = 'card-img';
}
/**
 * Implements hook_system_breadcrumb_alter().
 */
function b4theme_preprocess_breadcrumb(array &$vars) {
  // proper taxonomy breadcrumbs for Commerce Products through field_category
  $entity_type = 'commerce_product'; // TODO: change or verify
  $taxonomy_field_name = 'field_catalog'; // TODO: change or verify

  if (($entity = \Drupal::routeMatch()->getParameter($entity_type)) && $vars['breadcrumb']) {
    $cache_tag = "{$entity_type}:{$entity->product_id->value}"; // TODO: change or verify

    $breadcrumb = &$vars['breadcrumb'];
    if (!empty($entity->$taxonomy_field_name->entity)) {
//      $node_url =
      array_pop($breadcrumb);

      $term = $entity->$taxonomy_field_name->entity;
      $storage = \Drupal::service('entity_type.manager')
        ->getStorage('taxonomy_term');
      $parents = $storage->loadParents($term->id());
      if (!empty($parents)) {
        foreach ($parents as $index => $parent) {

          $parents_next = $storage->loadParents($parent->id());
          if (!empty($parents_next)) {
            foreach ($parents_next as $index_next => $parent_next) {
              array_push($breadcrumb, $parent_next->toLink());
            }
          }
          array_push($breadcrumb, $parent->toLink());
        }
      }
      array_push($breadcrumb, $term->toLink());

//      array_push($breadcrumb, $node_url);

      unset($breadcrumb[1]);

      // Implementing Cache.
      $vars['#cache']['contexts'][] = "url.path";
      $vars['#cache']['tags'][] = $cache_tag;
    }
  }
}

function b4theme_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#attributes']['class'][] = 'alert alert-dismissible alert-light';

}
function b4theme_form_user_pass_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#attributes']['class'][] = 'alert alert-dismissible alert-light';
}
